import unittest
from civilpy.state.ohio.dot import Project, BridgeObject


class TestBridgeObject(unittest.TestCase):
    def test_init(self, sfn='6500609'):
        # Creates a 'test bridge' and makes sure none of the attributes have changed
        tb = BridgeObject(sfn)
        # Tests that all the attributes in the TIMS database haven't changed, uses sfn 6500609 by default, but can
        # be changed to any SFN, //TODO - Update to a retired SFN to avoid non-tims related changes altering results
        self.assertEqual(tb.objectid, 23415906)
        self.assertEqual(tb.sfn, '6500609')
        self.assertEqual(tb.str_loc_carried, 'US 23SB')
        self.assertEqual(tb.rte_on_brg_cd, '10')
        self.assertEqual(tb.district, '06')
        self.assertEqual(tb.county_cd, 'PIC')
        self.assertEqual(tb.invent_spcl_dsgt, 'L')
        self.assertEqual(tb.fips_cd, '62484')
        self.assertEqual(tb.invent_on_und_cd, '1')
        self.assertEqual(tb.invent_hwy_sys_cd, '2')
        self.assertEqual(tb.invent_hwy_dsgt_cd, '1')
        self.assertEqual(tb.invent_dir_sfx_cd, '0')
        self.assertEqual(tb.invent_feat, 'SCIPPO CR')
        self.assertEqual(tb.str_loc, '1.6 MI N OF SR361')
        self.assertEqual(tb.latitude_dd, 39.531378)
        self.assertEqual(tb.longitude_dd, -82.967494)
        self.assertEqual(tb.brdr_brg_state, None)
        self.assertEqual(tb.brdr_brg_pct_resp, None)
        self.assertEqual(tb.brdr_brg_sfn, None)
        self.assertEqual(tb.main_str_mtl_cd, '4')
        self.assertEqual(tb.main_str_type_cd, '02')
        self.assertEqual(tb.apprh_str_mtl_cd, '0')
        self.assertEqual(tb.apprh_str_type_cd, '00')
        self.assertEqual(tb.main_spans, 3)
        self.assertEqual(tb.apprh_spans, 0)
        self.assertEqual(tb.deck_cd, '1')
        self.assertEqual(tb.deck_prot_extl_cd, 'N')
        self.assertEqual(tb.deck_prot_int_cd, '1')
        self.assertEqual(tb.wear_surf_dt, 1290556800000)
        self.assertEqual(tb.wearing_surf_cd, '1')
        self.assertEqual(tb.wearing_surf_thck, 1)
        self.assertEqual(tb.paint_dt, 1290556800000)
        self.assertEqual(tb.yr_built, -426124800000)
        self.assertEqual(tb.maj_recon_dt, 1290556800000)
        self.assertEqual(tb.type_serv1_cd, '1')
        self.assertEqual(tb.type_serv2_cd, '5')
        self.assertEqual(tb.lanes_on, 2)
        self.assertEqual(tb.lanes_und, 0)
        self.assertEqual(tb.invent_rte_adt, 12006)
        self.assertEqual(tb.bypass_len, '12')
        self.assertEqual(tb.nbis_len_sw, 'Y')
        self.assertEqual(tb.invent_nhs_cd, '1')
        self.assertEqual(tb.func_clas_cd, '02')
        self.assertEqual(tb.dfns_hwy_dsgt_sw, '0')
        self.assertEqual(tb.parallel_str_cd, 'L')
        self.assertEqual(tb.dir_traffic_cd, '1')
        self.assertEqual(tb.temp_str_sw, '')
        self.assertEqual(tb.dsgt_natl_netw_sw, '0')
        self.assertEqual(tb.toll_cd, '3')
        self.assertEqual(tb.routine_resp_cd, '01')
        self.assertEqual(tb.routine_resp_cd_2, '  ')
        self.assertEqual(tb.maint_resp_cd, '01')
        self.assertEqual(tb.maint_resp_cd_2, '  ')
        self.assertEqual(tb.insp_resp_cd, '01')
        self.assertEqual(tb.insp_resp_cd_2, '  ')
        self.assertEqual(tb.hist_sgn_cd, '5')
        self.assertEqual(tb.nav_control_sw, '0')
        self.assertEqual(tb.nav_vrt_clr, 0)
        self.assertEqual(tb.nav_horiz_clr, 0)
        self.assertEqual(tb.subs_fenders, '1')
        self.assertEqual(tb.min_nav_vrt_clr, 0)
        self.assertEqual(tb.insp_dt, 1614643200000)
        self.assertEqual(tb.dsgt_insp_freq, 24)
        self.assertEqual(tb.frac_crit_insp_sw, 'N')
        self.assertEqual(tb.fraccrit_insp_freq, 0)
        self.assertEqual(tb.frac_crit_insp_dt, None)
        self.assertEqual(tb.dive_insp_sw, 'N')
        self.assertEqual(tb.dive_insp_freq, 0)
        self.assertEqual(tb.dive_insp_dt, None)
        self.assertEqual(tb.spcl_insp_sw, 'N')
        self.assertEqual(tb.spcl_insp_freq, 0)
        self.assertEqual(tb.spcl_insp_dt, None)
        self.assertEqual(tb.snooper_insp_sw, 'N')
        self.assertEqual(tb.deck_summary, '8')
        self.assertEqual(tb.deck_wear_surf, '8')
        self.assertEqual(tb.deck_expn_joints, '')
        self.assertEqual(tb.sups_summary, '9')
        self.assertEqual(tb.paint, '8')
        self.assertEqual(tb.subs_summary, '9')
        self.assertEqual(tb.chan_summary, '6')
        self.assertEqual(tb.subs_scour, '7')
        self.assertEqual(tb.culvert_summary, 'N')
        self.assertEqual(tb.gen_appraisal, '9')
        self.assertEqual(tb.design_load_cd, '9')
        self.assertEqual(tb.rat_opr_load_fact, '2400')
        self.assertEqual(tb.rat_inv_load_cd, '7')
        self.assertEqual(tb.rat_inv_load_fact, '2300')
        self.assertEqual(tb.gen_opr_status, 'A')
        self.assertEqual(tb.brg_posting, '5')
        self.assertEqual(tb.calc_str_eval, '9')
        self.assertEqual(tb.calc_deck_geom, '8')
        self.assertEqual(tb.calc_undc, 'N')
        self.assertEqual(tb.ww_adequacy_cd, '6')
        self.assertEqual(tb.apprh_algn_cd, '8')
        self.assertEqual(tb.survey_railing, '1')
        self.assertEqual(tb.survey_transition, '1')
        self.assertEqual(tb.survey_guardrail, '1')
        self.assertEqual(tb.survey_rail_ends, '1')
        self.assertEqual(tb.scour_crit_cd, '8')
        self.assertEqual(tb.max_span_len, 65)
        self.assertEqual(tb.ovrl_str_len, 175.5)
        self.assertEqual(tb.sidw_wd_l, 0)
        self.assertEqual(tb.sidw_wd_r, 0)
        self.assertEqual(tb.brg_rdw_wd, 42)
        self.assertEqual(tb.deck_wd, 45)
        self.assertEqual(tb.apprh_rdw_wd, 42)
        self.assertEqual(tb.median_cd, '0')
        self.assertEqual(tb.skew_deg, 40)
        self.assertEqual(tb.flared_sw, '0')
        self.assertEqual(tb.min_horiz_clr_c, 42)
        self.assertEqual(tb.minvrt_undclr_c, 0)
        self.assertEqual(tb.impr_typ_work_cd, '  ')
        self.assertEqual(tb.impr_typ_means_cd, ' ')
        self.assertEqual(tb.impr_lng, 0)
        self.assertEqual(tb.impr_brg_cost, 0)
        self.assertEqual(tb.impr_rdw_cost, 0)
        self.assertEqual(tb.impr_tot_proj_cost, 0)
        self.assertEqual(tb.impr_cost_est_yr, 0)
        self.assertEqual(tb.future_adt, 16664)
        self.assertEqual(tb.future_adt_yr, 2038)
        self.assertEqual(tb.dedicated_nme, '')
        self.assertEqual(tb.invent_pref_rte, 'N')
        self.assertEqual(tb.major_brg_sw, 'N')
        self.assertEqual(tb.invent_county, 'DIS')
        self.assertEqual(tb.seismic_suscept_cd, 'N')
        self.assertEqual(tb.gasb_34_sw, 'Y')
        self.assertEqual(tb.aperture_fabr_sw, '2')
        self.assertEqual(tb.aperture_orig_sw, '2')
        self.assertEqual(tb.aperture_rep_sw, '1')
        self.assertEqual(tb.orig_proj_nbr, '044955')
        self.assertEqual(tb.std_drw_nbr, '')
        self.assertEqual(tb.microfilm_nbr, 'PIC003')
        self.assertEqual(tb.remarks, '')
        self.assertEqual(tb.utl_electric_sw, 'N')
        self.assertEqual(tb.utl_gas_sw, 'N')
        self.assertEqual(tb.utl_sewer_sw, 'N')
        self.assertEqual(tb.nbis_bridge_length, 175.5)
        self.assertEqual(tb.rte_und_brg_cd, '99')
        self.assertEqual(tb.load_rat_pct, 150)
        self.assertEqual(tb.load_rat_yr, 2006)
        self.assertEqual(tb.rating_soft_cd, '1')
        self.assertEqual(tb.catwalks_sw, 'N')
        self.assertEqual(tb.retire_reason_cd, '')
        self.assertEqual(tb.rec_add_dt, -2208988800000)
        self.assertEqual(tb.mpo_cd, 'NN')
        self.assertEqual(tb.temp_subdecking_sw, 'N')
        self.assertEqual(tb.apprh_slab_sw, 'Y')
        self.assertEqual(tb.median_typ1_cd, 'N')
        self.assertEqual(tb.median_typ2_cd, 'N')
        self.assertEqual(tb.median_typ3_cd, 'N')
        self.assertEqual(tb.railing_typ_cd, 'I')
        self.assertEqual(tb.composite_str_cd, 'Y')
        self.assertEqual(tb.elas_strp_trou2_sw, 'N')
        self.assertEqual(tb.elas_strp_trou3_sw, 'N')
        self.assertEqual(tb.fencing_sw, 'N')
        self.assertEqual(tb.glare_screen_sw, 'N')
        self.assertEqual(tb.noise_barrier_sw, 'N')
        self.assertEqual(tb.deck_area, 7898)
        self.assertEqual(tb.curb_sidw_mtl_l, 'N')
        self.assertEqual(tb.curb_sidw_mtl_r, 'N')
        self.assertEqual(tb.curb_sidw_typ_l, 'N')
        self.assertEqual(tb.curb_sidw_typ_r, 'N')
        self.assertEqual(tb.hinge_cd, 'N')
        self.assertEqual(tb.deck_drn_cd, '0')
        self.assertEqual(tb.deck_conc_typ_cd, 'B')
        self.assertEqual(tb.expn_joint1_cd, 'N')
        self.assertEqual(tb.expn_joint2_cd, 'N')
        self.assertEqual(tb.expn_joint3_cd, 'N')
        self.assertEqual(tb.horiz_crv_radius, '')
        self.assertEqual(tb.bearing_device1_cd, 'C')
        self.assertEqual(tb.bearing_device2_cd, 'N')
        self.assertEqual(tb.framing_typ_cd, '4')
        self.assertEqual(tb.haunch_gird_sw, 'N')
        self.assertEqual(tb.long_memb_typ_cd, 'N')
        self.assertEqual(tb.main_mem_cd, '1')
        self.assertEqual(tb.str_steel_prot_cd, '5')
        self.assertEqual(tb.pred_str_steel_typ, 'D')
        self.assertEqual(tb.paint_surface_area, 25457)
        self.assertEqual(tb.str_steel_paint_cd, '2')
        self.assertEqual(tb.post_tension_sw, 'N')
        self.assertEqual(tb.abut_fwd_typ_cd, 'D')
        self.assertEqual(tb.abut_fwd_matl_cd, '2')
        self.assertEqual(tb.abut_fwd_cd, 'A')
        self.assertEqual(tb.abut_rear_typ_cd, 'D')
        self.assertEqual(tb.abut_rear_matl_cd, '2')
        self.assertEqual(tb.abut_rear_cd, 'A')
        self.assertEqual(tb.pred_pier_typ_cd, '1')
        self.assertEqual(tb.pred_pier_matl_cd, '2')
        self.assertEqual(tb.pier_pred_cd, 'A')
        self.assertEqual(tb.pier_1_typ_cd, 'N')
        self.assertEqual(tb.pier_1_matl_cd, 'N')
        self.assertEqual(tb.pier_oth1_cd, 'N')
        self.assertEqual(tb.slope_prot_typ_cd, '3')
        self.assertEqual(tb.culvert_typ_cd, 'N')
        self.assertEqual(tb.culvert_len, 0)
        self.assertEqual(tb.culvert_fill_depth, 0)
        self.assertEqual(tb.scenic_waterway_sw, 'N')
        self.assertEqual(tb.chan_prot_type_cd, '5')
        self.assertEqual(tb.stream_velocity, '00000')
        self.assertEqual(tb.hist_typ_cd, '330')
        self.assertEqual(tb.hist_builder_cd, '192')
        self.assertEqual(tb.suff_rating, '089.3')
        self.assertEqual(tb.defic_func_rating, '0')
        self.assertEqual(tb.main_str_descr_cd, 'N')
        self.assertEqual(tb.apprh_str_descr_cd, 'N')
        self.assertEqual(tb.hist_build_yr, '1956')
        self.assertEqual(tb.nlfid, 'SPICUS00023**N')
        self.assertEqual(tb.ctl_begin_nbr, 3.68)
        self.assertEqual(tb.route_type, 'US')
        self.assertEqual(tb.route_nbr, '00023')
        self.assertEqual(tb.route_suffix, '*')
        self.assertEqual(tb.routine_insp_due, 1677628800000)
        self.assertEqual(tb.frac_crit_insp_due, None)
        self.assertEqual(tb.dive_insp_due, None)
        self.assertEqual(tb.spcl_insp_due, None)
        self.assertEqual(tb.bia_report, 'https://smsreports.dot.state.oh.us/CreateReport.aspx?SFN=6500609&IsBIA=true')
        self.assertEqual(tb.state_route_br_photos, 'https://brphotos.dot.state.oh.us/Bridges.aspx?county=PIC')
        self.assertEqual(tb.jurisdiction, 'S')
        self.assertEqual(tb.divided_hwy, 'Y')
        self.assertEqual(tb.access_control, None)
        self.assertEqual(tb.urban_area_code, '99999')
        self.assertEqual(tb.base_type, None)
        self.assertEqual(tb.functional_class, '3')
        self.assertEqual(tb.hpms_sample_id, None)
        self.assertEqual(tb.lanes, None)
        self.assertEqual(tb.maintenance_authority, None)
        self.assertEqual(tb.nhs, 'H')
        self.assertEqual(tb.priority_system, None)
        self.assertEqual(tb.surface_type, None)
        self.assertEqual(tb.surface_width, None)
        self.assertEqual(tb.esal_total, None)
        self.assertEqual(tb.pave_type, 'FLEX')
        self.assertEqual(tb.pcr_year, None)
        self.assertEqual(tb.roadway_width_nbr, None)
        self.assertEqual(tb.created_user, 'TIMS@P31_AG')
        self.assertEqual(tb.created_date, 1674812526000)
        self.assertEqual(tb.last_edited_user, 'TIMS@P31_AG')
        self.assertEqual(tb.last_edited_date, 1674812526000)


class TestProject(unittest.TestCase):
    def test_init(self, pid=112664):
        tp = Project(pid)

        self.assertEqual(tp.objectid, 33676656)
        self.assertEqual(tp.gis_id, 69802)
        self.assertEqual(tp.pid_nbr, 112664)
        self.assertEqual(tp.district_nbr, 6)
        self.assertEqual(tp.locale_short_nme, 'FRA')
        self.assertEqual(tp.county_nme, 'Franklin')
        self.assertEqual(tp.project_nme, 'D06-FY23 Bridge Repair')
        self.assertEqual(tp.contract_type, 'Standard Build')
        self.assertEqual(tp.primary_fund_category_txt, 'District Preservation (Pv & Br)')
        self.assertEqual(tp.project_manager_nme, 'PARKS, DANE RICHARD')
        self.assertEqual(tp.reservoir_year, None)
        self.assertEqual(tp.tier, None)
        self.assertEqual(tp.odot_letting, 'ODOT Let')
        self.assertEqual(tp.schedule_type_short_nme, 'Standard')
        self.assertEqual(tp.env_project_manager_nme, 'GARTNER, JANICE M')
        self.assertEqual(tp.area_engineer_nme, 'WISE, DANIEL S')
        self.assertEqual(tp.project_engineer_nme, 'FIRIS, BENJAMIN L')
        self.assertEqual(tp.design_agency, 'DISTRICT 6-ENGINEERING')
        self.assertEqual(tp.sponsoring_agency, 'DISTRICT 6-BRIDGES')
        self.assertEqual(tp.pdp_short_name, 'Path 1')
        self.assertEqual(tp.primary_work_category, 'Bridge Preservation')
        self.assertEqual(tp.project_status, 'Filed')
        self.assertEqual(tp.fiscal_year, '2023')
        self.assertEqual(tp.inhouse_design_full_nme, 'BLOOR, CLAYTON  ')
        self.assertEqual(tp.est_total_constr_cost, 571848.74)
        self.assertEqual(tp.state_project_nbr, None)
        self.assertEqual(tp.constr_vendor_nme, None)
        self.assertEqual(tp.stip_flag, None)
        self.assertEqual(tp.current_stip_co_amt, None)
        self.assertEqual(tp.project_plans_url, 'http://contracts.dot.state.oh.us/search.jsp?cabinetId=1002&PID_NUM=112664')
        self.assertEqual(tp.project_addenda_url, 'http://contracts.dot.state.oh.us/search.jsp?cabinetId=1000&PID_NUM=112664')
        self.assertEqual(tp.project_proposal_url, 'http://contracts.dot.state.oh.us/search.jsp?cabinetId=1003&PID_NUM=112664')
        self.assertEqual(tp.fmis_proj_desc, None)
        self.assertEqual(tp.award_milestone_dt, 1676851200000)
        self.assertEqual(tp.begin_constr_milestone_dt, 1681516800000)
        self.assertEqual(tp.end_constr_milestone_dt, 1693440000000)
        self.assertEqual(tp.open_traffic_dt, None)
        self.assertEqual(tp.central_office_close_dt, None)
        self.assertEqual(tp.source_last_updated, 1674864000000)
        self.assertEqual(tp.cod_last_updated, 1674864000000)
        self.assertEqual(tp.preserv_funds_ind, 'Y')
        self.assertEqual(tp.major_brg_funds_ind, 'N')
        self.assertEqual(tp.major_new_funds_ind, 'N')
        self.assertEqual(tp.major_rehab_funds_ind, 'N')
        self.assertEqual(tp.mpo_funds_ind, 'N')
        self.assertEqual(tp.safety_funds_ind, 'N')
        self.assertEqual(tp.local_funds_ind, 'N')
        self.assertEqual(tp.other_funds_ind, 'N')
        self.assertEqual(tp.nlf_id, 'SFRASR00003**C')
        self.assertEqual(tp.ctl_begin, 23.83)
        self.assertEqual(tp.ctl_end, None)
        self.assertEqual(tp.gis_feature_type, 'POINT')
        self.assertEqual(tp.route_type, 'SR')
        self.assertEqual(tp.route_id, '00003')
        self.assertEqual(tp.structure_file_nbr, '2500191')
        self.assertEqual(tp.main_structure_type, '201N')
        self.assertEqual(tp.sufficiency_rating, '086.7')
        self.assertEqual(tp.ovrl_structure_length, 64.7)
        self.assertEqual(tp.deck_area, 3319)
        self.assertEqual(tp.deck_width, 51.3)
        self.assertEqual(tp.feature_intersect, "                         ")
        self.assertEqual(tp.year_built, '1975')
        self.assertEqual(tp.longitude_begin_nbr, -82.928876)
        self.assertEqual(tp.latitude_begin_nbr, 40.070569)
        self.assertEqual(tp.longitude_end_nbr, None)
        self.assertEqual(tp.latitude_end_nbr, None)
        self.assertEqual(tp.county_cd_work_location, 'FRA')
        self.assertEqual(tp.county_nme_work_location, 'FRANKLIN')
        self.assertEqual(tp.district_work_location, '06')
        self.assertEqual(tp.pavement_treatment_type, None)
        self.assertEqual(tp.pavement_treatment_category, None)
        self.assertEqual(tp.created_user, 'TIMS@P31_AG')
        self.assertEqual(tp.created_date, 1674896842000)
        self.assertEqual(tp.last_edited_user, 'TIMS@P31_AG')
        self.assertEqual(tp.last_edited_date, 1674896842000)
        self.assertEqual(True, True)  # add assertion here


if __name__ == '__main__':
    unittest.main()
